#!/usr/bin/env python3

import rospy
from sensor_msgs.msg import JointState
from markers import *
from proyfunctions import *
cnt = 0
if __name__ == '__main__':

    # Initialize the node
    rospy.init_node("testKineControlPosition")
    print('starting motion ... ')
    # Publisher: publish to the joint_states topic
    pub = rospy.Publisher('joint_states', JointState, queue_size=10)
    # Files for the logs
    fxcurrent = open("/tmp/xcurrent.txt", "w")                
    fxdesired = open("/tmp/xdesired.txt", "w")
    fq = open("/tmp/q.txt", "w")

    # Markers for the current and desired positions
    bmarker_current  = BallMarker(color['RED'])
    bmarker_desired = BallMarker(color['GREEN'])

    # Joint names
    jnames = ['joint_1', 'joint_2','joint_3','joint_4','joint_5','joint_6','gripper_base-finger_1','gripper_base-finger_2']

    # Desired position
    xd = np.array([1.3, 1.2, 1.8])
    # Initial configuration
    q0 = np.array([0.0, 0, 0, 0, 0, 0, 0, 0])

    # Resulting initial position (end effector with respect to the base link)
    T = fkine_fanuc(q0)
    x0 = T[0:3,3]

    # Red marker shows the achieved position
    bmarker_current.xyz(x0)
    # Green marker shows the desired position
    bmarker_desired.xyz(xd)

    # Instance of the JointState message
    jstate = JointState()
    # Values of the message
    jstate.header.stamp = rospy.Time.now()
    jstate.name = jnames
    # Add the head joint value (with value 0) to the joints
    jstate.position = q0

    # Frequency (in Hz) and control period 
    freq = 200
    dt = 1.0/freq
    rate = rospy.Rate(freq)

    # Initial joint configuration
    q = copy(q0)
    # Main loop
    while not rospy.is_shutdown():
        # Current time (needed for ROS)
        jstate.header.stamp = rospy.Time.now()
        # Kinematic control law for position (complete here)
        # -----------------------------

        Tq = fkine_fanuc(q)
        J = jacobian_position(q)
        x = Tq[0:3,3]
        e = x-xd 
        k = 1
        de = -k*e
        Jq = np.linalg.pinv(J)
        epsilon = 0.0001
        
        dq = Jq.dot(de)
        #print(dq)
        if np.linalg.matrix_rank(J,0.0001) == 7:
           q =  q+dt*((J.T).dot(np.linalg.inv(J.dot(J.T)))).dot(de)
        
        else:      
           q = q+dt*dq

        # Verificación si se llegó al punto deseado
        if (np.linalg.norm(e)<epsilon):
           print("Se llegó al punto deseado en {:.3} segundos".format(cnt*dt))
           break
        cnt = cnt+1
        if (cnt > 1e5): 
            print("Se excedió el número de iteraciones")
            break
        #print(e)
        # -----------------------------

        
        # Log values                                                      
        fxcurrent.write(str(x[0])+' '+str(x[1]) +' '+str(x[2])+'\n')
        fxdesired.write(str(xd[0])+' '+str(xd[1])+' '+str(xd[2])+'\n')
        fq.write(str(q[0])+" "+str(q[1])+" "+str(q[2])+" "+str(q[3])+" "+
                 str(q[4])+" "+str(q[5])+"\n")
        
        # Publish the message
        jstate.position = q
        pub.publish(jstate)
        bmarker_desired.xyz(xd)
        bmarker_current.xyz(x)
        # Wait for the next iteration
        rate.sleep()

    print('ending motion ...')
    fxcurrent.close()
    fxdesired.close()
    fq.close()
